services:
  message:
    container_name: message-microservice
    build:
      context: ./message
      dockerfile: Dockerfile
      args:
        SHOW_ONLY_ERROR: ${SHOW_ONLY_ERROR}
    ports:
      - "${SOCKET_PORT}:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.message.rule=Host(`${SOCKET_HOST}`)"
      - "traefik.http.routers.message.entrypoints=websecure"
      - "traefik.http.routers.message.tls.certresolver=myresolver"
      - "traefik.http.services.message.loadbalancer.server.port=8080"

  user:
    container_name: user-microservice
    build:
      context: ./user
      dockerfile: Dockerfile
    ports:
      - '${SYMFONY_PORT}:8000'
    volumes:
      - ./docker/jwt:/app/config/jwt:rw
      - ./docker/keys:/app/config/keys:rw
    # Uncomment the following lines if you want to use volumes for local development
    #   - './user/:/app'
    #   # - './env:/.env'
    environment:
      - CORS_ALLOW_ORIGIN=${CORS_ALLOW_ORIGIN}
      - TRANSLATE_API_URL=http://text-manager-gpt:3000
      - SYMFONY_PROJECT_NAME=securedWhisker
      - DATABASE_URL=pgsql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}?serverVersion=16&charset=utf8
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=Host(`${SERVER_HOST}`)"
      - "traefik.http.routers.user.entrypoints=websecure"
      - "traefik.http.routers.user.tls.certresolver=myresolver"
      - "traefik.http.services.user.loadbalancer.server.port=8000"

      # - "traefik.http.routers.user.entrypoints=web"
      # - "traefik.http.routers.user.middlewares=redirect-to-https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  database:
    container_name: user-database
    restart: always
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports: 
      - "5432:5432"
    volumes:
      - ./docker/db/data:/var/lib/postgresql/data:rw
    networks:
      - app-network

  next-app:
    container_name: next-app
    build:
      context: ./front/
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_GPT_API_KEY: ${GPT_API_KEY}
        NEXT_PUBLIC_USER_HOST: ${SERVER_HOST}
        NEXT_PUBLIC_MESSAGE_HOST: ${SOCKET_HOST}
    restart: always
    ports:
      - ${NEXTJS_PORT}:3000
    networks:
      - app-network
    depends_on:
      - user
      - message
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.next-app.rule=Host(`${NEXTJS_DOMAIN}`)"
      - "traefik.http.routers.next-app.entrypoints=websecure"
      - "traefik.http.routers.next-app.tls.certresolver=myresolver"
      - "traefik.http.services.next-app.loadbalancer.server.port=3000"

      # - "traefik.http.routers.next-app.entrypoints=web"
      # - "traefik.http.routers.next-app.middlewares=redirect-to-https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  text-manager-gpt:
    build:
      context: ./TextManagerGPT
      dockerfile: Dockerfile
    container_name: TextManagerGPT
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - GPT_API_KEY=${GPT_API_KEY}
      - PORT=3000
    command: node dist/index.js
    networks:
      - app-network

networks:
  app-network:
    driver: bridge